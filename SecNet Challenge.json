{
	"AWSTemplateFormatVersion": "2010-09-09",
	"Description": "SecNet Challenge v6",
	"Mappings": {},
	"Parameters": {
        "LatestAmiId": {
            "Description": "Region specific image from the Parameter Store",
            "Type": "AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>",
            "Default": "/aws/service/ami-amazon-linux-latest/amzn2-ami-hvm-x86_64-gp2"
          }
    },
	"Metadata": {},
	"Conditions": {},
	"Resources": {		
		"SecnettestFunction":{
            "Type":"AWS::Lambda::Function",
            "Properties":{
                "Handler":"secnettest::secnettest.Bootstrap::ExecuteFunction",
                "Runtime":"dotnetcore3.1",
                "Code": {
                    "S3Bucket": "crasssecnettest",
                    "S3Key": "secnettest.zip"
                },
                "Timeout": 30,
                "Role": "arn:aws:iam::905822466440:role/secnet-Lambda-exec"
            }   
        },
        "Subneta":{
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId":"vpc-77994f0d",
                "CidrBlock":"172.31.96.0/20",
                "AvailabilityZone": "us-east-1a",
                "Tags": [{"Key":"Name", "Value":"secnet-private-a"}]
            }
        },
        "Subnetb":{
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId":"vpc-77994f0d",
                "CidrBlock":"172.31.112.0/20",
                "AvailabilityZone": "us-east-1b",
                "Tags": [{"Key":"Name", "Value":"secnet-private-b"}]
            }
        },
        "Subnetc":{
            "Type" : "AWS::EC2::Subnet",
            "Properties" : {
                "VpcId":"vpc-77994f0d",
                "CidrBlock":"172.31.128.0/20",
                "AvailabilityZone": "us-east-1c",
                "Tags": [{"Key":"Name", "Value":"secnet-private-c"}]
            }
        },
        "ElasticIP":{
            "Type": "AWS::EC2::EIP",
            "Properties":{
                "Domain":"vpc"
            }
        },
        "NATGateway":{
            "Type" : "AWS::EC2::NatGateway",
            "Properties" : {
                "AllocationId" : { "Fn::GetAtt" : ["ElasticIP", "AllocationId"]},
                "SubnetId" : "subnet-19bd077e",
                "Tags" : [ {"Key" : "Name", "Value" : "secnet-NAT" } ]
            },
            "DependsOn": "ElasticIP"
        },
        "RouteTable" : {
            "Type" : "AWS::EC2::RouteTable",
            "Properties" : {
               "VpcId" : "vpc-77994f0d"
            }
        },
        "SubnetaRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subneta" },
                "RouteTableId" : { "Ref" : "RouteTable" }
            },
            "DependsOn": ["RouteTable", "Subneta"]
        },
        "SubnetbRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnetb" },
                "RouteTableId" : { "Ref" : "RouteTable" }
            },
            "DependsOn": ["RouteTable", "Subnetb"]
        },
        "SubnetcRouteTableAssociation" : {
            "Type" : "AWS::EC2::SubnetRouteTableAssociation",
            "Properties" : {
                "SubnetId" : { "Ref" : "Subnetc" },
                "RouteTableId" : { "Ref" : "RouteTable" }
            },
            "DependsOn": ["RouteTable", "Subnetc"]
        },
        "Route":{
            "Type" : "AWS::EC2::Route",
            "Properties" : {
                "RouteTableId" : { "Ref" : "RouteTable" },
                "DestinationCidrBlock" : "0.0.0.0/0",
                "NatGatewayId" : { "Ref" : "NATGateway" }
            },
            "DependsOn":"RouteTable"
        },
        "SecurityGroup1":{
            "Type" : "AWS::EC2::SecurityGroup",
            "Properties":{
                "GroupDescription" : "Allow https to alb and host(s)",
                "VpcId":"vpc-77994f0d",
                "SecurityGroupIngress" : [
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : 443,
                        "ToPort" : 443,
                        "CidrIp" : "0.0.0.0/0"
                    },
                    {
                        "IpProtocol" : "tcp",
                        "FromPort" : 80,
                        "ToPort" : 80,
                        "CidrIp" : "0.0.0.0/0"
                    }
                ]
            }
        },
        "ALB1": {
            "Type" : "AWS::ElasticLoadBalancingV2::LoadBalancer",
            "Properties" : {
                "IpAddressType" : "ipv4",
                "Scheme" : "internet-facing",
                "SecurityGroups" : [ {"Ref":"SecurityGroup1"} ],
                "Subnets" : [ "subnet-19bd077e", "subnet-ba9b1a94", "subnet-747f353e" ],
                "Type" : "application"
            }
        },
        "HTTPListener":{
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
            "Properties":{
                "DefaultActions": [
                    {
                        "Type":"redirect",
                        "RedirectConfig": {
                            "Host" : "#{host}",
                            "Path" : "/#{path}",
                            "Port" : "443",
                            "Protocol" : "HTTPS",
                            "Query" : "#{query}",
                            "StatusCode" : "HTTP_301"
                        }
                    }
                ],
                "LoadBalancerArn":{"Ref":"ALB1"},
                "Port":"80",
                "Protocol":"HTTP"
            }
        },
        "HTTPSListener":{
            "Type": "AWS::ElasticLoadBalancingV2::Listener",
			"Properties": {
				"DefaultActions": [{
					"Type": "forward",
					"TargetGroupArn":{"Ref":"TargetGroup1"}
                }],
			  	"LoadBalancerArn": {"Ref": "ALB1"},
			  	"Port": "443",
			  	"Protocol": "HTTPS",
                "Certificates": [{"CertificateArn": "arn:aws:iam::905822466440:server-certificate/secnet"}]
			},
            "DependsOn": "ServerGroup1"
        },
        "TargetGroup1":{
            "Type" : "AWS::ElasticLoadBalancingV2::TargetGroup",
            "Properties": {
                "Port": 443,
				"Protocol": "HTTPS",
                "VpcId":"vpc-77994f0d"
            }
        },
        "LaunchConfig1":{
            "Type":"AWS::AutoScaling::LaunchConfiguration",
            "Metadata":{
                "AWS::CloudFormation::Init":{
                    "configSets":{
                        "linuxconfig":[
                            "ConfigureCWLogs-Linux",
                            "linuxsetup",
                            "selfsignedcert"
                        ]
                    },
                    "ConfigureCWLogs-Linux": {
                        "files": {
                            "/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json" : {
                                "content": {
                                    "Fn::Join": [
										"",
										[
                                            "{",
                                            "   \"agent\": {",
                                            "     \"logfile\": \"/opt/aws/amazon-cloudwatch-agent/logs/amazon-cloudwatch-agent.log\",",
                                                {
                                                    "Fn::Sub": "    \"region\": \"${AWS::Region}\""
                                                },
                                            "   },",
                                            "   \"logs\": {",
                                            "      \"logs_collected\": {",
                                            "        \"files\": {",
                                            "          \"collect_list\": [",
                                            "            {",
                                            "             \"file_path\": \"/var/log/cfn-init-cmd.log\",",
                                                {
                                                    "Fn::Sub": "             \"log_group_name\": \"${LogGroup}\","
                                                },
                                            "             \"log_stream_name\": \"{instance_id}/cfninitlog\",",
                                            "             \"timezone\": \"UTC\"",
                                            "           },",
                                            "           {",
                                            "             \"file_path\": \"/var/log/cloud-init-output.log\",",
                                                {
                                                    "Fn::Sub": "             \"log_group_name\": \"${LogGroup}\","
                                                },
                                            "             \"log_stream_name\": \"{instance_id}/userdatalog\",",
                                            "             \"timezone\": \"UTC\"",
                                            "           }",
                                            "         ]",
                                            "        }",
                                            "     },",
                                            "     \"log_stream_name\": \"{instance_id}/logstream\",",
                                            "     \"force_flush_interval\" : 15",
                                            "   }",
                                            " }"
										]
									]
                                }
                            }
                        },
                        "commands": {
                            "1-stop_service": {
                                "command": "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a stop"
                            },
                            "2-start_service": {
                                "command": "/opt/aws/amazon-cloudwatch-agent/bin/amazon-cloudwatch-agent-ctl -a fetch-config -m ec2 -c file:/opt/aws/amazon-cloudwatch-agent/etc/amazon-cloudwatch-agent.json -s"
                            }
	                    }
                    },
                    "linuxsetup": {
						"packages" : {
                            "yum" : {
                              "httpd"             : []
                            }
                        },
                        "files": {
							"/var/www/html/index.html":{
                                "content": "<html><head><title>We are SecNet!</title></head><body><h1>We are SecNet!</h1></body></html>",
                                "mode"    : "000644",
                                "owner"   : "root",
                                "group"   : "root"
                            },
                            "/etc/cfn/cfn-hup.conf": {
								"content": {
									"Fn::Join": ["",[
											"[main]\n",
											"stack=",{"Ref": "AWS::StackId"},"\n",
											"region=",{"Ref": "AWS::Region"},"\n"
										]
									]
								},
								"mode": "000400",
								"owner": "root",
								"group": "root"
							},
							"/etc/cfn/hooks.d/cfn-auto-reloader.conf": {
								"content": {
									"Fn::Join": ["",[
											"[cfn-auto-reloader-hook]\n",
											"triggers=post.update\n",
											"path=Resources.LaunchConfig1.Metadata.AWS::CloudFormation::Init\n",
											"action=/opt/aws/bin/cfn-init -v"," -s ",{"Ref": "AWS::StackName"}," -r LaunchConfig1"," -configsets linuxconfig"," --region ",{"Ref": "AWS::Region"},"\n",
											"runas=root\n"
										]
									]
								},
                                "mode": "000400",
								"owner": "root",
								"group": "root"
							}
						},
                        "services":{
                            "sysvinit":{
                                "httpd":{ "enabled" : "true", "ensureRunning" : "true" },
                                "cfn-hup" : { "enabled" : "true", "ensureRunning" : "true",
                                    "files" : ["/etc/cfn/cfn-hup.conf", "/etc/cfn/hooks.d/cfn-auto-reloader.conf"]}
                            }
                        }
					},
                    "selfsignedcert":{
                        "packages":{
                            "yum":{
                                "mod_ssl" : []
                            }
                        },
                        "commands":{
                            "1-createcert":{
                                "command": "/etc/pki/tls/certs/make-dummy-cert /etc/pki/tls/certs/localhost.crt"
                            },
                            "2-updatesslconf":{
                                "command": "sed -i.bak 's/^\\(SSLCertificateKeyFile.*\\)/#\\1/g' /etc/httpd/conf.d/ssl.conf"
                            },
                            "3-restarthttpd":{
                                "command": "systemctl restart httpd"
                            }
                        }
                    }
                }
            },
            "Properties":{
                "IamInstanceProfile": "BootstrapRole",
				"ImageId":{ "Ref":"LatestAmiId" },
				"KeyName": "newcrassgroupkey",
				"SecurityGroups":[ {"Ref":"SecurityGroup1"} ],
                "InstanceType":"t2.micro",
                "BlockDeviceMappings":[
                    {
                        "DeviceName": "/dev/xvda",
                        "Ebs": {
                            "VolumeSize": "20",
                            "VolumeType": "gp2"
                        }
                    }
                ],
                "UserData": {
					"Fn::Base64": {
                        "Fn::Join": [
                            "",
                            [
                                "#!/bin/bash -xe\n",
                                "yum update -y\n",
                                "rpm -Uvh https://s3.amazonaws.com/amazoncloudwatch-agent/amazon_linux/amd64/latest/amazon-cloudwatch-agent.rpm\n",
                                "/opt/aws/bin/cfn-init -v ",
                                "         --stack ",
                                {
                                    "Ref": "AWS::StackName"
                                },
                                "         --resource LaunchConfig1 ",
                                "         --configsets linuxconfig ",
                                "         --region ",
                                {
                                    "Ref": "AWS::Region"
                                },
                                "\n",
                                "cert=$(aws iam list-server-certificates --output text)\n",
                                "certname='secnet'\n",
                                "if [[ \"$cert\" == *\"$certname\"* ]]; then\n",
                                "  echo \"Cert found - nothing to do\"\n",
                                "else\n",
                                "  echo \"Cert not found - uploading server certificate\"\n",
                                "  openssl req -x509 -nodes -days 365 -newkey rsa:2048 -subj \"/C=US/ST=Pennsylvania/L=Reading/O=secnet/CN=secnet\" -keyout secnetprvKey.key -out secnetcert.crt\n",
                                "  openssl rsa -in secnetprvKey.key -text > secnetprv.pem\n",
                                "  openssl x509 -inform PEM -in secnetcert.crt > secnetpub.pem\n",
                                "  aws iam upload-server-certificate --server-certificate-name secnet --certificate-body file://secnetpub.pem --private-key file://secnetprv.pem\n",
                                "fi\n",
                                "yum install -y python37\n",
                                "curl -O https://bootstrap.pypa.io/get-pip.py\n",
                                "python3 get-pip.py\n",
                                "export PATH=~/.local/bin:$PATH\n",
                                "source ~/.bash_profile\n",
                                "pip install awscli --upgrade --user\n",
                                "pip install boto3\n",
                                "aws s3 cp s3://crassgroup-bootstrap/removebootstraprole.py .\n",
                                "python3 removebootstraprole.py\n",
                                "/opt/aws/bin/cfn-signal -e $? ",
                                "  --stack ", {"Ref":"AWS::StackName" },
                                "  --resource ServerGroup1 " ,
                                "  --region ", {"Ref":"AWS::Region"}, "\n"
                            ]
                        ]
                    }
                }
            }
        },
        "ServerGroup1" : {
            "Type" : "AWS::AutoScaling::AutoScalingGroup",
            "CreationPolicy":{
                "ResourceSignal":{
                    "Count": "1",
                    "Timeout":"PT5M"
                }
            },
            "Properties" : {
               "VPCZoneIdentifier" : [ {"Ref":"Subneta"}, {"Ref":"Subnetb"}, {"Ref":"Subnetc"} ],
               "LaunchConfigurationName" : { "Ref" : "LaunchConfig1" },
               "MinSize" : "1",
               "MaxSize" : "3",
               "HealthCheckGracePeriod" : 300,
               "MaxInstanceLifetime" : 2592000,
               "TargetGroupARNs" : [ { "Ref" : "TargetGroup1" } ]
            },
            "DependsOn":[
                "Subneta", 
                "Subnetb", 
                "Subnetc", 
                "NATGateway", 
                "Route", 
                "SubnetaRouteTableAssociation", 
                "SubnetbRouteTableAssociation", 
                "SubnetcRouteTableAssociation" 
            ] 
        },
		"LogGroup": {
			"Type": "AWS::Logs::LogGroup",
			"DeletionPolicy": "Retain",
			"Properties": {
              "RetentionInDays": 7
            }
        }
	},
	"Outputs": {
        "ALBDNSName": {
			"Description": "The DNS name of the load balancer.",
			"Value": {
				"Fn::GetAtt" : [ "ALB1", "DNSName" ]
			}
		}
    }
}